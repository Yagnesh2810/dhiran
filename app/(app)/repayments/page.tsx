"use client"

import { useState, useMemo, useEffect } from "react"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { format } from "date-fns"
import { CalendarIcon, Plus, Edit, Trash, Eye, X, ReceiptText, Banknote, Wallet, Printer } from "lucide-react"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { cn } from "@/lib/utils"
import { useAppStore, type Repayment } from "@/lib/store"
import { ImageUpload } from "@/components/ui/image-upload"
import { uploadVerificationImage } from "@/lib/supabase/database" // Import the Supabase upload function
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { generateReceiptPrint } from "@/lib/pdf-utils" // Import receipt print utility
import { formatAmount } from "@/lib/utils"

export default function RepaymentsPage() {
  const { customers, repayments, addRepayment, updateRepayment, deleteRepayment, loans, calculateInterest } =
    useAppStore()

  const [isAddRepaymentOpen, setIsAddRepaymentOpen] = useState(false)
  const [isEditRepaymentOpen, setIsEditRepaymentOpen] = useState(false)
  const [isViewRepaymentOpen, setIsViewRepaymentOpen] = useState(false)
  const [currentRepayment, setCurrentRepayment] = useState<Repayment | null>(null)

  const [customerId, setCustomerId] = useState("")
  const [customerSearchTerm, setCustomerSearchTerm] = useState("") // For customer search
  const [amount, setAmount] = useState<number | "">("")
  const [interestInfo, setInterestInfo] = useState<number | "">("") // This will be auto-filled
  const [discountGiven, setDiscountGiven] = useState<number | "">("")
  const [paymentDate, setPaymentDate] = useState<Date | undefined>(new Date())
  const [receiptId, setReceiptId] = useState("") // Receipt ID is generated in store
  const [notes, setNotes] = useState("")
  const [selectedImages, setSelectedImages] = useState<File[]>([]) // For new uploads
  const [existingImageUrls, setExistingImageUrls] = useState<string[]>([]) // For existing images

  const customerOptions = customers.map((customer) => ({
    value: customer.id,
    label: `${customer.id} - ${customer.name}`,
  }))

  const filteredCustomerOptions = useMemo(() => {
    if (!customerSearchTerm) {
      return customerOptions
    }
    return customers
      .filter(
        (customer) =>
          customer.name.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
          customer.id.toLowerCase().includes(customerSearchTerm.toLowerCase()),
      )
      .map((customer) => ({
        value: customer.id,
        label: `${customer.id} - ${customer.name}`,
      }))
  }, [customers, customerSearchTerm])

  // Effect to auto-calculate interestInfo when customerId changes
  useEffect(() => {
    if (customerId) {
      const customerLoans = loans.filter((loan) => loan.customerId === customerId)
      const customerRepayments = repayments.filter((repayment) => repayment.customerId === customerId)

      const totalAccruedInterest = customerLoans.reduce(
        (sum, loan) => sum + calculateInterest(loan.amount, loan.interestRate, loan.startDate),
        0,
      )
      const totalPaidInterestSoFar = customerRepayments.reduce((sum, r) => sum + r.interestInfo, 0)

      const outstandingInterest = totalAccruedInterest - totalPaidInterestSoFar
      setInterestInfo(Number.parseFloat(outstandingInterest.toFixed(4)))
    } else {
      setInterestInfo("")
    }
  }, [customerId, loans, repayments, calculateInterest])

  const resetForm = () => {
    setCustomerId("")
    setCustomerSearchTerm("")
    setAmount("")
    setInterestInfo("") // Will be reset by useEffect
    setDiscountGiven("")
    setPaymentDate(new Date())
    setReceiptId("")
    setNotes("")
    setSelectedImages([])
    setExistingImageUrls([])
    setCurrentRepayment(null)
  }

  const handleAddRepayment = async () => {
    if (!customerId || amount === "" || !paymentDate) {
      alert("કૃપા કરીને ગ્રાહક, રકમ અને ચુકવણી તારીખ ભરો.")
      return
    }

    const customerName = customers.find((c) => c.id === customerId)?.name || "અજાણ્યો ગ્રાહક"
    const tempRepaymentId = `R${Date.now()}` // Temporary ID for image upload before actual ID is generated by store

    const uploadedImageUrls: string[] = []
    if (selectedImages.length > 0) {
      for (const file of selectedImages) {
        try {
          const url = await uploadVerificationImage(file, tempRepaymentId) // Use temp ID for upload path
          uploadedImageUrls.push(url)
        } catch (error) {
          console.error("Error uploading image:", error)
          alert("ફોટો અપલોડ કરવામાં ભૂલ થઈ.")
          return
        }
      }
    }

    await addRepayment({
      customerId,
      customerName,
      amount: Number(amount),
      interestInfo: Number(interestInfo || 0),
      discountGiven: Number(discountGiven || 0),
      date: format(paymentDate, "yyyy-MM-dd"),
      notes,
      verificationImages: uploadedImageUrls,
    })
    resetForm()
    setIsAddRepaymentOpen(false)
  }

  const handleEditRepayment = async () => {
    if (!currentRepayment || amount === "" || !paymentDate) {
      alert("કૃપા કરીને રકમ અને ચુકવણી તારીખ ભરો.")
      return
    }

    const updatedImageUrls = [...existingImageUrls] // Start with existing URLs

    if (selectedImages.length > 0) {
      for (const file of selectedImages) {
        try {
          const url = await uploadVerificationImage(file, currentRepayment.id)
          updatedImageUrls.push(url)
        } catch (error) {
          console.error("Error uploading image:", error)
          alert("ફોટો અપલોડ કરવામાં ભૂલ થઈ.")
          return
        }
      }
    }

    await updateRepayment(currentRepayment.id, {
      customerId: currentRepayment.customerId, // Customer ID should not be editable
      customerName: currentRepayment.customerName,
      amount: Number(amount),
      interestInfo: Number(interestInfo || 0),
      discountGiven: Number(discountGiven || 0),
      date: format(paymentDate, "yyyy-MM-dd"),
      notes,
      verificationImages: updatedImageUrls,
    })
    resetForm()
    setIsEditRepaymentOpen(false)
  }

  const handleDeleteRepayment = (id: string) => {
    if (window.confirm("શું તમે ખરેખર આ ચુકવણી કાઢી નાખવા માંગો છો?")) {
      deleteRepayment(id)
    }
  }

  const openEditDialog = (repayment: Repayment) => {
    setCurrentRepayment(repayment)
    setCustomerId(repayment.customerId)
    setAmount(repayment.amount)
    setInterestInfo(repayment.interestInfo) // Pre-fill with existing interestInfo
    setDiscountGiven(repayment.discountGiven)
    setPaymentDate(new Date(repayment.date))
    setReceiptId(repayment.receiptId)
    setNotes(repayment.notes)
    setExistingImageUrls(repayment.verificationImages || [])
    setSelectedImages([]) // Clear new images when opening edit
    setIsEditRepaymentOpen(true)
  }

  const openViewDialog = (repayment: Repayment) => {
    setCurrentRepayment(repayment)
    setIsViewRepaymentOpen(true)
  }

  const handleImageRemove = (indexToRemove: number) => {
    setExistingImageUrls((prevUrls) => prevUrls.filter((_, index) => index !== indexToRemove))
  }

  const handlePrintReceipt = (repayment: Repayment) => {
    generateReceiptPrint(repayment)
  }

  // Calculate summary statistics for the header
  const totalRepaymentAmount = repayments.reduce((sum, r) => sum + r.amount, 0)
  const totalInterestCollected = repayments.reduce((sum, r) => sum + r.interestInfo, 0)
  const totalDiscountGiven = repayments.reduce((sum, r) => sum + r.discountGiven, 0)
  const totalOutstandingLoans = loans.reduce((sum, loan) => sum + loan.remainingAmount, 0)

  return (
    <div className="flex flex-col gap-6 p-6 bg-background min-h-screen">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold text-primary">ચુકવણીઓ</h1>
        <Dialog open={isAddRepaymentOpen} onOpenChange={setIsAddRepaymentOpen}>
          <DialogTrigger asChild>
            <Button onClick={resetForm} className="bg-primary hover:bg-primary/90 text-white">
              <Plus className="mr-2 h-4 w-4" /> નવી ચુકવણી ઉમેરો
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle className="text-primary">નવી ચુકવણી ઉમેરો</DialogTitle>
              <DialogDescription>ચુકવણીની વિગતો દાખલ કરો.</DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="customer-search" className="text-right">
                  ગ્રાહક શોધો
                </Label>
                <Input
                  id="customer-search"
                  value={customerSearchTerm}
                  onChange={(e) => setCustomerSearchTerm(e.target.value)}
                  placeholder="ID અથવા નામ દ્વારા શોધો"
                  className="col-span-3"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="customer" className="text-right">
                  ગ્રાહક પસંદ કરો *
                </Label>
                <Select value={customerId} onValueChange={setCustomerId}>
                  <SelectTrigger className="col-span-3">
                    <SelectValue placeholder="ગ્રાહક પસંદ કરો" />
                  </SelectTrigger>
                  <SelectContent>
                    {filteredCustomerOptions.length > 0 ? (
                      filteredCustomerOptions.map((option) => (
                        <SelectItem key={option.value} value={option.value}>
                          {option.label}
                        </SelectItem>
                      ))
                    ) : (
                      <SelectItem value="no-customer" disabled>
                        કોઈ ગ્રાહક મળ્યો નથી
                      </SelectItem>
                    )}
                  </SelectContent>
                </Select>
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="amount" className="text-right">
                  રકમ (₹) *
                </Label>
                <Input
                  id="amount"
                  type="number"
                  value={amount}
                  onChange={(e) => setAmount(Number(e.target.value))}
                  className="col-span-3"
                  placeholder="ચુકવણીની રકમ"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="interestInfo" className="text-right">
                  વ્યાજ માહિતી (₹)
                </Label>
                <Input
                  id="interestInfo"
                  type="number"
                  value={interestInfo}
                  onChange={(e) => setInterestInfo(Number(e.target.value))}
                  className="col-span-3"
                  placeholder="વ્યાજની રકમ"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="discountGiven" className="text-right">
                  છૂટ આપેલ (₹)
                </Label>
                <Input
                  id="discountGiven"
                  type="number"
                  value={discountGiven}
                  onChange={(e) => setDiscountGiven(Number(e.target.value))}
                  className="col-span-3"
                  placeholder="આપેલ છૂટ"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="paymentDate" className="text-right">
                  ચુકવણી તારીખ *
                </Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant={"outline"}
                      className={cn(
                        "col-span-3 justify-start text-left font-normal",
                        !paymentDate && "text-muted-foreground",
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {paymentDate ? format(paymentDate, "PPP") : "તારીખ પસંદ કરો"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar mode="single" selected={paymentDate} onSelect={setPaymentDate} initialFocus />
                  </PopoverContent>
                </Popover>
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="notes" className="text-right">
                  નોંધો
                </Label>
                <Textarea
                  id="notes"
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  className="col-span-3"
                  placeholder="વધારાની નોંધો"
                />
              </div>
              <div className="grid grid-cols-4 items-start gap-4">
                <Label htmlFor="verificationImages" className="text-right pt-2">
                  ચકાસણી ફોટા
                </Label>
                <div className="col-span-3">
                  <ImageUpload onImagesChange={setSelectedImages} />
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsAddRepaymentOpen(false)}>
                રદ કરો
              </Button>
              <Button onClick={handleAddRepayment} className="bg-primary hover:bg-primary/90 text-white">
                ચુકવણી ઉમેરો
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      <div className="grid gap-4 md:grid-cols-4">
        <Card className="border-l-4 border-l-success hover:shadow-lg transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-accent">કુલ ચુકવણી રકમ</CardTitle>
            <ReceiptText className="h-4 w-4 text-success" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-success">₹{formatAmount(totalRepaymentAmount)}</div>
            <p className="text-xs text-muted-foreground">કુલ પરત મળેલ રકમ</p>
          </CardContent>
        </Card>

        <Card className="border-l-4 border-l-warning hover:shadow-lg transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-accent">કુલ વ્યાજ મળેલ</CardTitle>
            <Banknote className="h-4 w-4 text-warning" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-warning">
              ₹{formatAmount(totalInterestCollected)}
            </div>
            <p className="text-xs text-muted-foreground">વાસ્તવિક વ્યાજની આવક</p>
          </CardContent>
        </Card>

        <Card className="border-l-4 border-l-info hover:shadow-lg transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-accent">કુલ છૂટ આપેલ</CardTitle>
            <Banknote className="h-4 w-4 text-info" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-info">₹{formatAmount(totalDiscountGiven)}</div>
            <p className="text-xs text-muted-foreground">કુલ આપેલ છૂટ</p>
          </CardContent>
        </Card>

        <Card className="border-l-4 border-l-destructive hover:shadow-lg transition-shadow">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-accent">બાકી લોન રકમ</CardTitle>
            <Wallet className="h-4 w-4 text-destructive" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-destructive">₹{formatAmount(totalOutstandingLoans)}</div>
            <p className="text-xs text-muted-foreground">ગ્રાહકો પાસેથી બાકી રકમ</p>
          </CardContent>
        </Card>
      </div>

      <div className="rounded-md border overflow-hidden shadow-lg">
        <Table>
          <TableHeader className="bg-muted/50">
            <TableRow>
              <TableHead>ગ્રાહકનું નામ</TableHead>
              <TableHead>રકમ (₹)</TableHead>
              <TableHead>વ્યાજ માહિતી (₹)</TableHead>
              <TableHead>છૂટ આપેલ (₹)</TableHead>
              <TableHead>ચુકવણી તારીખ</TableHead>
              <TableHead>રસીદ ID</TableHead>
              <TableHead>નોંધો</TableHead>
              <TableHead className="text-right">ક્રિયાઓ</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {repayments.map((repayment) => (
              <TableRow key={repayment.id}>
                <TableCell className="font-medium">{repayment.customerName}</TableCell>
                <TableCell>₹{formatAmount(repayment.amount)}</TableCell>
                <TableCell>
                  ₹{formatAmount(repayment.interestInfo)}
                </TableCell>
                <TableCell>₹{formatAmount(repayment.discountGiven)}</TableCell>
                <TableCell>{repayment.date}</TableCell>
                <TableCell>{repayment.receiptId}</TableCell>
                <TableCell>{repayment.notes || "N/A"}</TableCell>
                <TableCell className="text-right flex gap-2 justify-end">
                  <Button variant="outline" size="icon" onClick={() => openViewDialog(repayment)}>
                    <Eye className="h-4 w-4" />
                    <span className="sr-only">જુઓ</span>
                  </Button>
                  <Button variant="outline" size="icon" onClick={() => openEditDialog(repayment)}>
                    <Edit className="h-4 w-4" />
                    <span className="sr-only">સંપાદિત કરો</span>
                  </Button>
                  <Button variant="outline" size="icon" onClick={() => handlePrintReceipt(repayment)}>
                    <Printer className="h-4 w-4" />
                    <span className="sr-only">રસીદ પ્રિન્ટ કરો</span>
                  </Button>
                  <Button variant="destructive" size="icon" onClick={() => handleDeleteRepayment(repayment.id)}>
                    <Trash className="h-4 w-4" />
                    <span className="sr-only">કાઢી નાખો</span>
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {/* Edit Repayment Dialog */}
      <Dialog open={isEditRepaymentOpen} onOpenChange={setIsEditRepaymentOpen}>
        <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="text-primary">ચુકવણી સંપાદિત કરો</DialogTitle>
            <DialogDescription>ચુકવણીની વિગતો અપડેટ કરો.</DialogDescription>
          </DialogHeader>
          {currentRepayment && (
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="edit-customer" className="text-right">
                  ગ્રાહક *
                </Label>
                <Select value={customerId} onValueChange={setCustomerId} disabled>
                  <SelectTrigger className="col-span-3">
                    <SelectValue placeholder="ગ્રાહક પસંદ કરો" />
                  </SelectTrigger>
                  <SelectContent>
                    {customerOptions.map((option) => (
                      <SelectItem key={option.value} value={option.value}>
                        {option.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="edit-amount" className="text-right">
                  રકમ (₹) *
                </Label>
                <Input
                  id="edit-amount"
                  type="number"
                  value={amount}
                  onChange={(e) => setAmount(Number(e.target.value))}
                  className="col-span-3"
                  placeholder="ચુકવણીની રકમ"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="edit-interestInfo" className="text-right">
                  વ્યાજ માહિતી (₹)
                </Label>
                <Input
                  id="edit-interestInfo"
                  type="number"
                  value={interestInfo}
                  onChange={(e) => setInterestInfo(Number(e.target.value))}
                  className="col-span-3"
                  placeholder="વ્યાજની રકમ"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="edit-discountGiven" className="text-right">
                  છૂટ આપેલ (₹)
                </Label>
                <Input
                  id="edit-discountGiven"
                  type="number"
                  value={discountGiven}
                  onChange={(e) => setDiscountGiven(Number(e.target.value))}
                  className="col-span-3"
                  placeholder="આપેલ છૂટ"
                />
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="edit-paymentDate" className="text-right">
                  ચુકવણી તારીખ *
                </Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant={"outline"}
                      className={cn(
                        "col-span-3 justify-start text-left font-normal",
                        !paymentDate && "text-muted-foreground",
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {paymentDate ? format(paymentDate, "PPP") : "તારીખ પસંદ કરો"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar mode="single" selected={paymentDate} onSelect={setPaymentDate} initialFocus />
                  </PopoverContent>
                </Popover>
              </div>
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="edit-notes" className="text-right">
                  નોંધો
                </Label>
                <Textarea
                  id="edit-notes"
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  className="col-span-3"
                  placeholder="વધારાની નોંધો"
                />
              </div>
              <div className="grid grid-cols-4 items-start gap-4">
                <Label htmlFor="edit-verificationImages" className="text-right pt-2">
                  ચકાસણી ફોટા
                </Label>
                <div className="col-span-3">
                  <div className="flex flex-wrap gap-2 mb-2">
                    {existingImageUrls.map((url, index) => (
                      <div key={index} className="relative w-24 h-24">
                        <img
                          src={url || "/placeholder.svg"}
                          alt={`Verification ${index}`}
                          className="w-full h-full object-cover rounded-md"
                        />
                        <Button
                          variant="destructive"
                          size="icon"
                          className="absolute -top-2 -right-2 h-6 w-6 p-0 rounded-full"
                          onClick={() => handleImageRemove(index)}
                        >
                          <X className="h-3 w-3" />
                        </Button>
                      </div>
                    ))}
                  </div>
                  <ImageUpload onImagesChange={setSelectedImages} />
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsEditRepaymentOpen(false)}>
              રદ કરો
            </Button>
            <Button onClick={handleEditRepayment} className="bg-primary hover:bg-primary/90 text-white">
              ચુકવણી અપડેટ કરો
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* View Repayment Dialog */}
      <Dialog open={isViewRepaymentOpen} onOpenChange={setIsViewRepaymentOpen}>
        <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="text-primary">ચુકવણી વિગતો</DialogTitle>
            <DialogDescription>ચુકવણીની સંપૂર્ણ માહિતી.</DialogDescription>
          </DialogHeader>
          {currentRepayment && (
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-2 gap-2">
                <span className="font-medium">ગ્રાહકનું નામ:</span>
                <span>{currentRepayment.customerName}</span>
                <span className="font-medium">રકમ:</span>
                <span>₹{formatAmount(currentRepayment.amount)}</span>
                <span className="font-medium">વ્યાજ માહિતી:</span>
                <span>
                  ₹{formatAmount(currentRepayment.interestInfo)}
                </span>
                <span className="font-medium">છૂટ આપેલ:</span>
                <span>₹{formatAmount(currentRepayment.discountGiven)}</span>
                <span className="font-medium">ચુકવણી તારીખ:</span>
                <span>{currentRepayment.date}</span>
                <span className="font-medium">રસીદ ID:</span>
                <span>{currentRepayment.receiptId}</span>
                <span className="font-medium">નોંધો:</span>
                <span>{currentRepayment.notes || "N/A"}</span>
              </div>
              {currentRepayment.verificationImages && currentRepayment.verificationImages.length > 0 && (
                <div className="mt-4">
                  <h3 className="font-semibold mb-2">ચકાસણી ફોટા:</h3>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    {currentRepayment.verificationImages.map((url, index) => (
                      <img
                        key={index}
                        src={url || "/placeholder.svg"}
                        alt={`Verification Image ${index + 1}`}
                        className="w-full h-32 object-cover rounded-md shadow-sm"
                      />
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsViewRepaymentOpen(false)}>
              બંધ કરો
            </Button>
            <Button
              onClick={() => handlePrintReceipt(currentRepayment!)}
              className="bg-primary hover:bg-primary/90 text-white"
            >
              <Printer className="h-4 w-4 mr-2" /> રસીદ પ્રિન્ટ કરો
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
